package com.moglan.eac.connection;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Logger;

/**
 * Basic implementation of a TCP client that keeps socket connection open
 * until indicated otherwise.
 * 
 * @author Vlad-Adrian Moglan
 */
public abstract class TCPClient implements Runnable {

	protected final Logger LOGGER = Logger.getLogger(getClass().getName());
	
	private String addr;
	private int port;
	
	/**
	 * The constructor opens a socket with a given address and a given port.
	 * 
	 * @param addr is the address of the remote server
	 * @param port is the port through which to access the server
	 * @throws UnknownHostException if the host cannot be found
	 * @throws IOException if the socket fails to open
	 */
	public TCPClient(String addr, int port) throws UnknownHostException, IOException {
		this.addr = addr;
		this.port = port;
	}
	
	/**
	 * Runs the client which maintains the connection open until it is closed gracefully
	 * or interrupted.
	 */
	@Override
	public final void run() {
		Socket socket;
		
		try {
			socket = new Socket(addr, port);
			
			onConnect(socket);
			
			try {
				ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
				ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
				Message<?> request = null;
				
				do {
					request = createRequest();
					oos.writeUnshared(request);
				} while (keepAlive(ois, oos, request));
			} catch (IOException e) {
				LOGGER.severe(e.getMessage());
			} finally {
				onDisconnect();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @param ois is the socket input stream
	 * @param oos is the socket output stream
	 * @param request is the request generated by the client
	 * @return true if the connection is to be maintained
	 * @throws IOException if a socket error occurs
	 * @throws ClassNotFoundException if Java cannot establish the class of the received object
	 */
	private final boolean keepAlive(ObjectInputStream ois, ObjectOutputStream oos, Message<?> request) 
			throws IOException, ClassNotFoundException {
		Object response = null;
		
		if (request.getProtocol() != Protocol.END_CONNECTION) {
			response = ois.readObject();
			
			if (response instanceof Message) {
				handleResponse((Message<?>) response);
			} else {
				return false;
			}
		} else {
			return false;
		}
		
		return true;
	}
	
	/**
	 * Method called when the connection is established.
	 * 
	 * @param socket is used for communicating with the server.
	 */
	protected abstract void onConnect(Socket socket);
	
	/**
	 * Method called when the connection is ended. 
	 */
	protected abstract void onDisconnect();
	
	/**
	 * Creates a request directed at the server and allows the implementation of a connection interruption 
	 * mechanism.
	 * 
	 * @return a server request
	 */
	protected abstract Message<?> createRequest();
	
	/**
	 * Handles the response received from the server after a request.
	 * 
	 * @param response is the message received from the server
	 */
	protected abstract void handleResponse(Message<?> response);
	
}
